/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*,TreeNode*> mp;
    void inord(TreeNode* root){
        if(root==NULL){
            return;
        }
        if(root->left){
            mp[root->left]=root;
        }
        inord(root->left);

        if(root->right){
            mp[root->right]=root;
        }
        inord(root->right);
    }

    void bfs(TreeNode* target, int k,vector<int> &res){
        queue<TreeNode* > q;
        unordered_set<int> vis;
        q.push(target);
        vis.insert(target->val);

        while(!q.empty()){
            int n=q.size();
            if(k==0){
                break;
            }

            for(int i=0;i<n;i++){
                TreeNode* t=q.front();
                q.pop();

                if(t->left && !vis.count(t->left->val)){
                    q.push(t->left);
                    vis.insert(t->left->val);
                }

                if(t->right && !vis.count(t->right->val)){
                    q.push(t->right);
                    vis.insert(t->right->val);
                }

                if(mp.count(t) && !vis.count(mp[t]->val)){
                    q.push(mp[t]);
                    vis.insert(mp[t]->val);
                }
            }
                            k--;

        }

        while(!q.empty()){
            TreeNode* t=q.front();
            q.pop();
            res.push_back(t->val);
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int> res;
        inord(root);
        bfs(target,k,res);

        return res;
    }
};
